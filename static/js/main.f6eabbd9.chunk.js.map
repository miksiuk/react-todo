{"version":3,"sources":["components/ToDoLine.js","components/AddTodo.js","components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["ToDo","props","useState","todo","name","nameTodo","setNameTodo","editing","setEditing","disabled","first","onClick","todoUp","last","todoDown","type","value","onChange","e","target","done","color","todoChangeStatus","newTodo","todoChangeName","todoChange","openModal","AddTodo","addTodo","setTodo","ConfirmModal","setName","Modal","aria-labelledby","centered","Header","Title","Body","class","id","Footer","className","closeModal","todoRemove","App","todoList","setTodoList","isOpenModalDeleteConfirm","setIsOpenModalDeleteConfirm","modalDeletedTodo","setModalDeletedTodo","newTodoList","find","el","index","findIndex","temp","map","i","key","length","show","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f6eabbd9.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport default function ToDo(props) {\n    const [nameTodo, setNameTodo] = useState(props.todo.name);\n    const [editing, setEditing] = useState(false);\n\n    const todoChange = () => {\n        let newTodo = { ...props.todo, name: nameTodo };\n        props.todoChangeName(newTodo);\n        setEditing(false);\n    }\n    const todoEdit = () => {\n        setEditing(true);\n        setNameTodo(props.todo.name);\n    }\n\n    return <>\n        <button disabled={props.first || editing} onClick={() => props.todoUp(props.todo)}>▲</button>\n        <button disabled={props.last || editing} onClick={() => props.todoDown(props.todo)}>▼</button>\n        {editing ?\n            <input type=\"text\" value={nameTodo} onChange={e => setNameTodo(e.target.value)}></input> :\n            <span>{props.todo.done ? <font color=\"green\"> ✓ <s>{props.todo.name}</s></font> : <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{props.todo.name}</span>}</span>\n        }\n        <button disabled={editing} onClick={() => props.todoChangeStatus(props.todo)}>{props.todo.done ? 'resume' : 'done'}</button>\n        {editing ?\n            <button onClick={() => todoChange()}>submit</button> :\n            <button onClick={() => todoEdit()}>edit</button>\n\n        }\n        <button disabled={editing} onClick={() => props.openModal(props.todo)}>delete</button>\n    </>\n}","import React, { useState } from 'react';\n\nexport default function AddTodo({ addTodo }) {\n    const [todo, setTodo] = useState('');\n    const adding = () => {\n        addTodo(todo);\n        setTodo('');\n    }\n    return <div>\n        <input type=\"text\" value={todo} onChange={(e) => setTodo(e.target.value)}></input>\n        <button disabled={todo === ''} onClick={() => adding()}>Add Todo</button>\n    </div>\n}","import React, { useState } from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\n\r\n\r\n\r\nexport default function ConfirmModal(props) {\r\n\r\n    const [name, setName] = useState();\r\n\r\n    const del = () => {\r\n        if (props.todo.name === name) {\r\n            setName('');\r\n            props.closeModal();\r\n            props.todoRemove(props.todo)\r\n        } else {\r\n            setName('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal {...props}\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered>\r\n            <Modal.Header>\r\n                <Modal.Title>Delete Confirmation</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div>Enter <strong>\"{props.todo.name}\"</strong> to remove ToDo</div>\r\n                <input type=\"text\" class=\"form-control\" id=\"nameToDo\" value={name} onChange={(e) => setName(e.target.value)} />\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <button className=\"btn btn-danger\" disabled={name !== props.todo.name} onClick={() => del()}>\r\n                    Delete\r\n          </button>\r\n                <button className=\"btn btn-secondary\" onClick={() => props.closeModal()}>\r\n                    Close\r\n          </button>\r\n            </Modal.Footer>\r\n\r\n\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport PostList from \"./components/PostList\";\nimport ToDoLine from \"./components/ToDoLine\";\nimport AddTodo from \"./components/AddTodo\";\nimport ModalDeleteConfirm from \"./components/Modal\"\n//XMLHTTPRequest\n//fetch\n//axious\n\nfunction App() {\n\n  const list = [\n    {\n      id: 1,\n      name: 'toDo1',\n      done: false\n    },\n    {\n      id: 2,\n      name: 'toDo2',\n      done: false\n    }\n  ]\n\n  const [todoList, setTodoList] = useState(list);\n  const [isOpenModalDeleteConfirm, setIsOpenModalDeleteConfirm] = useState(false);\n  const [modalDeletedTodo, setModalDeletedTodo] = useState({});\n\n  const todoChangeStatus = (todo) => {\n    let newTodoList = [...todoList];\n    newTodoList.find(el => el.id === todo.id).done = todo.done ? false : true;\n    setTodoList(newTodoList);\n  }\n\n  const todoChangeName = (todo) => {\n    let newTodoList = [...todoList];\n    newTodoList.find(el => el.id === todo.id).name = todo.name;\n    setTodoList(newTodoList);\n  }\n\n  const todoRemove = (todo) => {\n    let newTodoList = [...todoList].filter(el => el.id !== todo.id);\n    setTodoList(newTodoList);\n    setModalDeletedTodo({});\n    setIsOpenModalDeleteConfirm(false);\n  }\n\n  const closeModal = () => {\n    setModalDeletedTodo({});\n    setIsOpenModalDeleteConfirm(false);\n  }\n\n  const openModal = (todo) => {\n    setModalDeletedTodo(todo);\n    setIsOpenModalDeleteConfirm(true);\n  }\n\n  const todoAdd = (name) => {\n    let newTodoList = [...todoList, { id: todoList.length + 1, name: name, done: false }];\n    setTodoList(newTodoList);\n  }\n\n  const todoUp = (todo) => {\n    let newTodoList = [...todoList];\n    let index = newTodoList.findIndex(el => el.id === todo.id);\n    let temp = newTodoList[index - 1];\n    newTodoList[index - 1] = todo;\n    newTodoList[index] = temp;\n    setTodoList(newTodoList);\n  }\n\n  const todoDown = (todo) => {\n    let newTodoList = [...todoList];\n    let index = newTodoList.findIndex(el => el.id === todo.id);\n    let temp = newTodoList[index + 1];\n    newTodoList[index + 1] = todo;\n    newTodoList[index] = temp;\n    setTodoList(newTodoList);\n  }\n\n  // useEffect(() => {\n  //   console.log('Render');\n  //   getPosts()\n  // }, []);\n\n  // const [posts, setPosts] = useState([]);\n\n  // const getPosts = () => {\n  //   fetch('https://jsonplaceholder.typicode.com/posts')\n  //     .then(res => res.json())\n  //     .then(res => setPosts(res))\n  // };\n\n  return (\n    <div className=\"App\">\n      {/* <button onClick={getPosts}>Get posts</button> */}\n      {/* <PostList posts={posts} /> */}\n      <ul>\n        {todoList.map((el, i) => <li>\n          <ToDoLine key={el.id} todo={el}\n            todoChangeStatus={todoChangeStatus}\n            todoUp={todoUp}\n            todoDown={todoDown}\n            openModal={openModal}\n            todoChangeName={todoChangeName}\n            first={i === 0 ? true : false}\n            last={i === todoList.length - 1 ? true : false} /></li>)}\n      </ul>\n      <AddTodo addTodo={todoAdd} />\n      <ModalDeleteConfirm show={isOpenModalDeleteConfirm}\n        closeModal={closeModal}\n        todo={modalDeletedTodo}\n        todoRemove={todoRemove} />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}